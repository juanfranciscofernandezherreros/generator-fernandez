"use strict";

const Generator = require("yeoman-generator");
const chalk = require("chalk");
const yosay = require("yosay");
const lodash = require("lodash");

module.exports = class extends Generator {
  prompting() {
	this.log("........................................................");
	this.log("..####...#####...######..##..##...####...#####...######.");
	this.log(".##..##..##..##..##......###.##..##..##..##..##....##...");
	this.log(".##..##..#####...####....##.###..######..#####.....##...");
	this.log(".##..##..##......##......##..##..##..##..##........##...");
	this.log("..####...##......######..##..##..##..##..##......######.");
	this.log("........................................................");
	this.log("                      QUERY GENERATOR - v 0.0.1         ");
	this.log("                                                        ");

    const prompts = [
      {
        type: "input",
        name: "projectName",
        message:
          "What is the name of the project you want to build? (clp-bck-[PROJECT_NAME]-q)",
		validate: input => /^([a-z]{1}[a-z0-9-]*(\.[a-z]{1}[0-9a-z]*)*)$/.test(input) ? true : 'Invalid project name',
        default: "resources"
      },
      {
        type: "input",
        name: "resource",
        message:
          "What is the RESOURCE that you want to model? (your API should be /[RESOURCE]/{id}. Please, use lowercase!)",
        default: "resources"
      },
      {
        type: "input",
        name: "apiType",
        message:
          "What is the JSON:API type of your resource? (please, use plural!)",
        default: "resources"
      },
      {
        type: "input",
        name: "searchPath",
        message:
          "What is the search path of your resource? (example: /some-collection will produce /some-collection/search)",
        default: "resources"
      },
      {
        type: "input",
        name: "apiName",
        message:
          "What is the title of your API? (example: Business-Participants, will produce Business-Participants JSON:API Interface",
        default: "resource"
      },
	  {
        type: "input",
        name: "mongoCollection",
        message:
          "What is the collection in Mongo DB where we will read? (format: DCLEAR.MUR.[KS|DAT|CALC].[COLLECTION]. Example: DCLEAR.MUR.KS.SOMETHING",
        default: "DCLEAR.MUR.KS.SOMETHING"
      }
    ];
	
	return this.prompt(prompts).then(props => {
      // To access props later use this.props.someAnswer;
      this.props = props;
    });
  }

  writing() {
    this.log("Starting generation of your project...");
	this.log(this.props);
    this.props.projectName = "clp-bck-"+this.props.projectName+"-q";
	
	//Service Folder (where the magic happens)
	this.fs.copyTpl(
      this.templatePath("java/service"),
      this.destinationPath(this.props.projectName+"/"+this.props.projectName+"-service"),
      {
        projectName: this.props.projectName,
		resource: this.props.resource,
		resourceDot: this.props.resource.replaceAll("-",".")
      }
    );
	
	//Service Folder (Java code)
    this.fs.copyTpl(
      this.templatePath("service-code"),
      this.destinationPath(this.props.projectName+"/"+this.props.projectName+"-service/src/main/java/com/bme/clp/bck/"+this.props.resource.replaceAll("-","/")+"/q"),
      {
        projectName: this.props.projectName,
		resource: this.props.resource,
		resourceUpr: lodash.capitalize(this.props.resource),
		resourceDot: this.props.resource.replaceAll("-","."),
		mongoCollection: this.props.mongoCollection
      }
    );
	
	//Tests (Basic Java Tests)
    this.fs.copyTpl(
      this.templatePath("service-test"),
      this.destinationPath(this.props.projectName+"/"+this.props.projectName+"-service/src/test/java/com/bme/clp/bck/"+this.props.resource.replaceAll("-","/")+"/q"),
      {
        projectName: this.props.projectName,
		resource: this.props.resource,
		resourceDot: this.props.resource.replaceAll("-","."),
		resourceUpr: lodash.capitalize(this.props.resource),
		mongoCollection: this.props.mongoCollection
      }
    );
	
	//Swagger API folder. Where the Swagger is placed.
	this.fs.copyTpl(
      this.templatePath("java/src"),
      this.destinationPath(this.props.projectName+"/src"),
      {
        projectName: this.props.projectName,
		resource: this.props.resource,
		resourceDot: this.props.resource.replaceAll("-","."),
		apiType: this.props.apiType,
		searchPath: this.props.searchPath,
		apiName: this.props.apiName,
		resourceUpr: lodash.capitalize(this.props.resource)
      }
    );
	
	// Copy all non-dotfiles
	this.fs.copyTpl(
	  this.templatePath('java/*.*'),
	  this.destinationPath(this.props.projectName),
	  {
        projectName: this.props.projectName
	  }
    );

    // Copy all dotfiles
    this.fs.copyTpl(
      this.templatePath('java/.*'),
      this.destinationPath(this.props.projectName)
    );
  }
};
